# File: services/wireman_management_services.py

from sqlalchemy.orm import Session
from database.models import Wireman, Bill, Point
from sqlalchemy.exc import SQLAlchemyError
from datetime import date
from decimal import Decimal
from typing import Optional, List, Tuple
from sqlalchemy import func

def register_new_wireman(db: Session, name: str, contact_info: str) -> tuple[bool, str]:
    """Register a new wireman."""
    if not name:
        return False, "Wireman name is required."

    try:
        new_wireman = Wireman(name=name, contact_info=contact_info, date_registered=date.today())
        db.add(new_wireman)
        db.commit()
        return True, f"Wireman {name} registered successfully!"
    except SQLAlchemyError as e:
        db.rollback()
        return False, f"An error occurred while registering the wireman: {str(e)}"


def fetch_all_wiremen(db: Session) -> list[Wireman]:
    """Fetch all wiremen from the database."""
    return db.query(Wireman).all()


def get_wireman_dashboard_data(db: Session, wireman_id: int) -> dict:
    """Get dashboard data for a wireman."""
    total_bills = db.query(Bill).filter(Bill.wireman_id == wireman_id).count()
    total_business = calculate_total_business(db, wireman_id)
    latest_bill = get_latest_bill(db, wireman_id)
    total_points = calculate_total_points(db, wireman_id)
    point_record = get_point_record(db, wireman_id)
    balance_points = point_record.balance_points if point_record else Decimal('0')

    return {
        "total_bills": total_bills,
        "total_business": total_business,
        "latest_bill_date": latest_bill.date if latest_bill else None,
        "total_points": total_points,
        "balance_points": balance_points
    }


def calculate_total_business(db: Session, wireman_id: int) -> Decimal:
    """Calculate total business generated by a wireman."""
    total_business = db.query(Bill.amount).filter(Bill.wireman_id == wireman_id).all()
    return sum((amount for (amount,) in total_business), Decimal('0'))


def get_latest_bill(db: Session, wireman_id: int) -> Optional[Bill]:
    """Get the latest bill for a wireman."""
    return db.query(Bill).filter(Bill.wireman_id == wireman_id).order_by(Bill.date.desc()).first()


def calculate_total_points(db: Session, wireman_id: int) -> Decimal:
    """Calculate total points earned by a wireman."""
    point_record = get_point_record(db, wireman_id)
    return point_record.total_points if point_record else Decimal('0')


def get_point_record(db: Session, wireman_id: int) -> Optional[Point]:
    """Get the point record for a wireman."""
    return db.query(Point).filter(Point.wireman_id == wireman_id).first()


def redeem_all_points(db: Session, wireman_id: int) -> tuple[bool, str]:
    """Redeem all points for a wireman."""
    point_record = get_point_record(db, wireman_id)
    if not point_record:
        return False, "No points record found for this wireman."

    try:
        point_record.redeemed_points += point_record.balance_points
        point_record.balance_points = Decimal('0')
        db.commit()
        return True, "All points redeemed successfully!"
    except SQLAlchemyError as e:
        db.rollback()
        return False, f"An error occurred while redeeming points: {str(e)}"


def redeem_specific_points(db: Session, wireman_id: int, points_to_redeem: Decimal) -> tuple[bool, str]:
    """Redeem a specific amount of points for a wireman."""
    point_record = get_point_record(db, wireman_id)
    if not point_record:
        return False, "No points record found for this wireman."

    if points_to_redeem > point_record.balance_points:
        return False, "Not enough points to redeem."

    try:
        point_record.redeemed_points += points_to_redeem
        point_record.balance_points -= points_to_redeem
        db.commit()
        return True, f"{points_to_redeem} points redeemed successfully!"
    except SQLAlchemyError as e:
        db.rollback()
        return False, f"An error occurred while redeeming points: {str(e)}"


def reset_points(db: Session, wireman_id: int) -> tuple[bool, str]:
    """Reset all points for a wireman."""
    point_record = get_point_record(db, wireman_id)
    if not point_record:
        return False, "No points record found for this wireman."

    try:
        total_points = point_record.redeemed_points + point_record.balance_points
        point_record.redeemed_points = Decimal('0')
        point_record.balance_points = total_points
        db.commit()
        return True, "Points reset successfully!"
    except SQLAlchemyError as e:
        db.rollback()
        return False, f"An error occurred while resetting points: {str(e)}"


def get_wiremen_with_points_or_bills(db: Session, filter_by: str, min_value: float, max_value: float) -> List[
    Tuple[Wireman, float]]:
    """
    Get wiremen that have balance points or total bill amount within a specified range.

    Args:
        db (Session): The database session.
        filter_by (str): 'balance_points' or 'total_bill_amount'
        min_value (float): Minimum value for the filter.
        max_value (float): Maximum value for the filter.

    Returns:
        List[Tuple[Wireman, float]]: List of tuples containing Wireman and the filtered value.
    """
    if filter_by == 'balance_points':
        query = db.query(Wireman, Point.balance_points.label('value')). \
            join(Point, Wireman.id == Point.wireman_id). \
            filter(Point.balance_points.between(min_value, max_value))
    else:  # total_bill_amount
        query = db.query(Wireman, func.sum(Bill.amount).label('value')). \
            join(Bill, Wireman.id == Bill.wireman_id). \
            group_by(Wireman.id). \
            having(func.sum(Bill.amount).between(min_value, max_value))

    return query.all()


def get_leaderboard(db: Session, category: str) -> List[Tuple[Wireman, float]]:
    """
    Get leaderboard based on the selected category.

    Args:
        db (Session): The database session.
        category (str): 'total_bill_amount', 'number_of_bills', 'balance_points', or 'total_points'

    Returns:
        List[Tuple[Wireman, float]]: List of tuples containing Wireman and the category value, sorted in descending order.
    """
    if category == 'total_bill_amount':
        query = db.query(Wireman, func.sum(Bill.amount).label('value')). \
            join(Bill, Wireman.id == Bill.wireman_id). \
            group_by(Wireman.id). \
            order_by(func.sum(Bill.amount).desc())
    elif category == 'number_of_bills':
        query = db.query(Wireman, func.count(Bill.id).label('value')). \
            join(Bill, Wireman.id == Bill.wireman_id). \
            group_by(Wireman.id). \
            order_by(func.count(Bill.id).desc())
    elif category == 'balance_points':
        query = db.query(Wireman, Point.balance_points.label('value')). \
            join(Point, Wireman.id == Point.wireman_id). \
            order_by(Point.balance_points.desc())
    else:  # total_points
        query = db.query(Wireman, Point.total_points.label('value')). \
            join(Point, Wireman.id == Point.wireman_id). \
            order_by(Point.total_points.desc())

    return query.all()


def update_wireman(db: Session, wireman_id: int, name: str, contact_info: str) -> Tuple[bool, str]:
    """Update a wireman's details."""
    try:
        wireman = db.query(Wireman).filter(Wireman.id == wireman_id).first()
        if not wireman:
            return False, "Wireman not found."

        wireman.name = name
        wireman.contact_info = contact_info
        db.commit()
        return True, f"Wireman {name} updated successfully!"
    except SQLAlchemyError as e:
        db.rollback()
        return False, f"An error occurred while updating the wireman: {str(e)}"


def delete_wireman(db: Session, wireman_id: int) -> Tuple[bool, str]:
    """Delete a wireman and associated records."""
    try:
        wireman = db.query(Wireman).filter(Wireman.id == wireman_id).first()
        if not wireman:
            return False, "Wireman not found."

        # Delete associated bills and points
        db.query(Bill).filter(Bill.wireman_id == wireman_id).delete()
        db.query(Point).filter(Point.wireman_id == wireman_id).delete()

        db.delete(wireman)
        db.commit()
        return True, f"Wireman {wireman.name} and associated records deleted successfully!"
    except SQLAlchemyError as e:
        db.rollback()
        return False, f"An error occurred while deleting the wireman: {str(e)}"


def get_wireman_by_id(db: Session, wireman_id: int) -> Optional[Wireman]:
    """Fetch a wireman by ID."""
    return db.query(Wireman).filter(Wireman.id == wireman_id).first()
